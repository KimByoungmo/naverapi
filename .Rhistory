library(naverapi)
?naverblog.search
?`naverblog.search-package`
require(ggmap)
?`ggmap-package`
pacman::p_unload(ggmap)
require(naverapi)
install.packages('rmost')
install.packages('rmote')
install.packages('Rmote')
install.packages('moteR')
naverblog.search()
getOption(devtools)
getOption(devtools)
getOption('devtools')
require(devtools)
getOption("devtools.desc.author")
getOption("devtools.desc")
?create
update.packages(ask = F, repos = 'http://cran.nexr.com')
getOption("repos")
library(naverapi)
.rs.installBuildTools()
library(naverapi)
library(naverapi)
naverblog.search()
available.packages()
available.packages(repos = 'http://cran.nexr.com','pdf')
update.packages(repos = 'http://cran.nexr.com')
getOption("repos")
update.packages(repos = 'http://cran.nexr.com')
library(naverapi)
match.call(ccall = 'pacman::p_load()')
match.call(call = 'pacman::p_load()')
match.call(call = 'match.call(call = ')
match.call(call = 'match.call('dfdf')')
match.call(call = match.call('dfdf'))
match.call(reLines('a.txt'))
match.call(readLines('a.txt'))
match.call(readLines('a.txt'))
getAnywhere()
getAnywhere('dd')
getAnywhere('d')
getAnywhere('d')
d
d
d
d
rm(list = ls())
getAnywhere()
getAnywhere(a)
getAnywhere('a')
getAnywhere('^a')
getAnywhere('a*')
getAnywhere(a*)
?getAnywhere
getAnywhere('format.dist')
match.call(getAnywhere('format.dist'))
match.call(getAnywhere('format.dist'), definition = format.dist)
getAnywhere(format.dist)
argsAnywhere(format.dist)
argsAnywhere(format.dist)
argsAnywhere
argsAnywhere('format.dist')
format.dist
format.dist()
format.difftime()
require(util)
require(utils)
format.default()
getAnywhere('format.dist')
argsAnywhere(format.dist)
argsAnywhere(as.vector())
argsAnywhere(as.vector
)
argsAnywhere(vector)
args(vector)
args(vector())
args(vector
)
args(ls)
args(scan)
args('scan')
args(naverblog.search)
?match.call
match.call(get, call("get", "abc", i = FALSE, p = 3))
## -> get(x = "abc", pos = 3, inherits = FALSE)
match.call(get, call("get", "abc", i = FALSE, p = 3))
## -> get(x = "abc", pos = 3, inherits = FALSE)
match.call(get, call("get", "abc", i = FALSE, p = 3))
## -> get(x = "abc", pos = 3, inherits = FALSE)
fun <- function(x, lower = 0, upper = 1) {
structure((x - lower) / (upper - lower), CALL = match.call())
}
fun(4 * atan(1), u = pi)
?structure
structure(1:6, dim = 2:3)
rm(list =ls())
?match.args
?match.arg
?match.call
match.call(get, call("get", "abc", i = FALSE, p = 3))
## -> get(x = "abc", pos = 3, inherits = FALSE)
fun <- function(x, lower = 0, upper = 1) {
structure((x - lower) / (upper - lower), CALL = match.call())
}
fun(4 * atan(1), u = pi)
fun <- function(x, lower = 0, upper = 1) {
+     structure((x - lower) / (upper - lower), CALL = as.list(match.call()))
+ }
fun <- function(x, lower = 0, upper = 1) {
+     structure((x - lower) / (upper - lower), CALL = as.list(match.call()))
+ }
fun <- function(x, lower = 0, upper = 1) {
+     structure((x - lower) / (upper - lower), CALL = as.list(match.call())}
fun <- function(x, lower = 0, upper = 1) {
+     structure((x - lower) / (upper - lower), CALL = as.list(match.call())
}
fun <- function(x, lower = 0, upper = 1) {
+     structure((x - lower) / (upper - lower), CALL = as.list(match.call()))
+ }
fun <- function(x, lower = 0, upper = 1) {
+     structure((x - lower) / (upper - lower), CALL = as.list(match.call())
+ }
fun <- function(x, lower = 0, upper = 1) {
+     structure((x - lower) / (upper - lower), CALL = as.list(match.call()))
+ }
fun <- function(x, lower = 0, upper = 1) {
+     structure((x - lower) / (upper - lower), CALL = as.list(match.call()))
+
)
fun <- function(x, lower = 0, upper = 1) {
+     structure((x - lower) / (upper - lower), CALL = as.list(match.call()))
+
}
View(fun)
rm(fun)
fun <- function(x, lower = 0, upper = 1) {
structure((x - lower) / (upper - lower), CALL = match.call())
}
fun <- function(x, lower = 0, upper = 1) {
structure((x - lower) / (upper - lower), CALL = as.list(match.call()))
}
fun(4 * atan(1), u = pi)
rm(list = ls())
library(naverapi)
id = 'DpMY9iw4AztbeSxYXf2t'
secret <- '69Az0lv56T'
naverblog.search(id,secret)
naverblog.search(client_id = id,client_secret = secret)
naverblog.search(client_Id = id,client_secret = secret)
naverblog.search()
library(naverapi)
naverblog.search(id,secret)
naverblog.search(client_Id = id, client_secret = secret)
naverblog.search(client_Id = id, client_secret = secret)
library(naverapi)
naverblog.search(client_Id = id, client_secret = secret)
naverblog.search(client_Id = id, client_secret = secret, keyword = NULL)
naverblog.search(client_Id = id, client_secret = secret, keyword = NA)
naverblog.search(client_Id = id, client_secret = secret, keyword = df)
naverblog.search(client_Id = id, client_secret = secret, keyword = 'df')
f?is.null
?is.null
is.null(list())
logical(0)
F
is.null(F)
is.null(F)
is.null(NULL)
is.na()
is.na(as/list)
is.na(as.list())
as.list()
as.list(a = '')
list()
is.na(list())
is.na(NA)
is.character(list)
is.character(list())
is.character(list(a = 'dfd'))
?is.character
is.character(vector())
library(naverapi)
naverblog.search()
library(naverapi)
naverblog.search()
library(naverapi)
library(naverapi)
naverblog.search()
naverblog.search(keyword = '')
library(naverapi)
naverblog.search()
naverblog.search()
naverblog.search()
require(naverapi)
naverblog.search()
library(naverapi)
naverblog.search()
naverblog.search(keyword = '')
naverblog.search(keyword = '',)
library(naverapi)
naverblog.search()
naverblog.search()
naverblog.search(keyword = '안동',)
naverblog.search(keyword = '안동', client_Id = id, client_secret = secret)
warnings()
naverblog.search(keyword = 'Andong', client_Id = id, client_secret = secret)
library(naverapi)
naverblog.search()
naverblog.search(keyword = 'dd')
naverblog.search(keyword = 'dd')
naverblog.search(keyword = 'dd')
.Last.value
naverblog.search(keyword = 'dd')
is.character(arg['keyword'])
is.character(arg['keyword'])
arg['keyword']
arg$keyword
is.character(arg$keyword)
q
rm(list = ls())
update.packages(ask = F, repos = 'http://cran.nexr.com')
update.packages()
library(naverapi)
naverblog.search()
library(naverapi)
naverblog.search()
library(naverapi)
naverblog.search()
naverblog.search('안동')
그(ㅣㅑㄴㅅ = ㅣㄴ())
rm(list = ls())
library(naverapi)
naverblog.search()
naverblog.search(dfklsf)
naverblog.search('df')
id <- 'DpMY9iw4AztbeSxYXf2t'
s <- '69Az0lv56T'
naverblog.search('andong',id,s)
naverblog.search(11,id,s)
naverblog.search('11',id,s)
library(naverapi)
naverblog.search('11',id,s)
naverblog.search('1,id,s)
''
'
naverblog.search(1,id,s)
debugSource()
debugSource()
debugSource()
naverblog.search(1,id,s)
library(naverapi)
naverblog.search(1,id,s)
naverblog.search(1,'df',s)
naverblog.search('1','df',s)
rm(h)
url = 'https://openapi.naver.com/v1/search/blog.xml'
h <- c('X-Naver-Client-Id'= client_Id, 'X-Naver-Client-Secret' = client_secret)
q <- list (query = enc2utf8('keyword'), display = as.numeric(100), start = as.numeric(1), sort = sort = 'sim')
q <- list (query = enc2utf8('keyword'), display = as.numeric(100), start = as.numeric(1), sort =
'sim')
q
result <- GET(url = url, add_headers(h), query = q), useInternalNodes = T, getDTD = F, encoding = 'UTF-8'
result <- GET(url = url, add_headers(h), query = q), useInternalNodes = T, getDTD = F, encoding = 'UTF-8')
result <- GET(url = url, add_headers(h), query = q)
require(httr)
result <- GET(url = url, add_headers(h), query = q)
h <- c('X-Naver-Client-Id'= 'DpMY9iw4AztbeSxYXf2t', 'X-Naver-Client-Secret' = s)
h
result <- GET(url = url, add_headers(h), query = q)
result
str(result)
result$status_code
result$headers
result$request
result$status_code
result$all_headers
result$cookies
result$request
result$request$output
result$request$options
result$request$method
result$all_headers
result
result
str(result)
result <- GET(url = url, add_headers(), query = q)
result
str(result)
result$headers$`content-length`
result$content
result$request
result$request$output
result$url
result$status_code
result$all_headers
result$headers$`apigw-error`
result
result <- xmlRoot(htmlTreeParse(result), useInternalNodes = T, getDTD = F, encoding = 'UTF-8')
require(httr)
result <- xmlRoot(htmlTreeParse(result), useInternalNodes = T, getDTD = F, encoding = 'UTF-8')
require(XML)
result <- xmlRoot(htmlTreeParse(result), useInternalNodes = T, getDTD = F, encoding = 'UTF-8')
result
result <- GET(url = url, add_headers(h), query = q)
result
result <- GET(url = url, add_headers(), query = q)
htmlTreeParse(result)
xmlRoot
xmlRoot(result)
htmlTreeParse(result, useInternalNodes = T, encoding = 'UTF-8')
htmlTreeParse(result, useInternalNodes = F, encoding = 'UTF-8')
rm(list = ls())
addinexamples:::reformatAddin()
require(r2ppt)
install.packages('R2PPT')
require(R2PPT)
pacman::p_unload(R2PPT)
update.packages(repos = 'http://cran.nexr.com')
update.packages()
h <- c(`X-Naver-Client-Id` = 'DpMY9iw4AztbeSxYXf2t', `X-Naver-Client-Secret` = '69Az0lv56T')  #GET header setting
q <- list(query = enc2utf8(keyword), display = as.numeric(display),
start = as.numeric(start), sort = sort)  #GET parameter setting
result <- GET(url = url, add_headers(h), query = q)
h
h <- c(`X-Naver-Client-Id` = 'DpMY9iw4AztbeSxYXf2t', `X-Naver-Client-Secret` = '69Az0lv56T')  #GET header setting
q <- list(query = enc2utf8('keyword'), display = as.numeric(1),
start = as.numeric(1), sort = sort)  #GET parameter setting
result <- GET(url = url, add_headers(h), query = q)
require(httr)
h <- c(`X-Naver-Client-Id` = 'DpMY9iw4AztbeSxYXf2t', `X-Naver-Client-Secret` = '69Az0lv56T')  #GET header setting
q <- list(query = enc2utf8('keyword'), display = as.numeric(1),
start = as.numeric(1), sort = sort)  #GET parameter setting
result <- GET(url = url, add_headers(h), query = q)
h <- c(`X-Naver-Client-Id` = 'DpMY9iw4AztbeSxYXf2t', `X-Naver-Client-Secret` = '69Az0lv56T')  #GET header setting
q <- list(query = enc2utf8('keyword'), display = as.numeric(1),
start = as.numeric(1), sort = sort)  #GET parameter setting
result <- GET(url = url, add_headers(h), query = q)
q
q
q
q
q
q
q
h <- c(`X-Naver-Client-Id` = 'DpMY9iw4AztbeSxYXf2t', `X-Naver-Client-Secret` = '69Az0lv56T')  #GET header setting
q <- list(query = enc2utf8('keyword'), display = as.numeric(1),
start = as.numeric(1), sort = 'sim')  #GET parameter setting
result <- GET(url = url, add_headers(h), query = q)
q
h
h <- c(`X-Naver-Client-Id` = 'DpMY9iw4AztbeSxYXf2t', `X-Naver-Client-Secret` = '69Az0lv56T')  #GET header setting
q <- list(query = enc2utf8('keyword'), display = as.numeric(1),
start = as.numeric(1), sort = 'sim')  #GET parameter setting
result <- GET(url = url, add_headers(h), query = q)
url = 'https://openapi.naver.com/v1/search/blog.xml'
h <- c(`X-Naver-Client-Id` = 'DpMY9iw4AztbeSxYXf2t', `X-Naver-Client-Secret` = '69Az0lv56T')  #GET header setting
q <- list(query = enc2utf8('keyword'), display = as.numeric(1),
start = as.numeric(1), sort = 'sim')  #GET parameter setting
result <- GET(url = url, add_headers(h), query = q)
result
str(result)
h
h
h <- c(`X-Naver-Client-Id` = 'DpMY9iw4AztbeSxYXf2t', `X-Naver-Client-Secret` = '69Az0lv56T')  #GET header setting
q <- list(query = enc2utf8(''), display = as.numeric(1),
start = as.numeric(1), sort = 'sim')  #GET parameter setting
result <- GET(url = url, add_headers(h), query = q)
h <- c(`X-Naver-Client-Id` = 'DpMY9iw4AztbeSxYXf2t', `X-Naver-Client-Secret` = '69Az0lv56T')  #GET header setting
q <- list(query = enc2utf8('keyword'), display = as.numeric(1),
start = as.numeric(1), sort = 'sim')  #GET parameter setting
result <- GET(url = url, add_headers(h), query = q)
result
h <- c(`X-Naver-Client-Id` = 'DpMY9iw4AztbeSxYXf2t', `X-Naver-Client-Secret` = '69Az0lv56T')  #GET header setting
q <- list(query = enc2utf8(''), display = as.numeric(1),
start = as.numeric(1), sort = 'sim')  #GET parameter setting
result <- GET(url = url, add_headers(h), query = q)
result
str(result)
result$all_headers
result$content
result$request$options$httpget
result$handle
result$status_code
str(result)
View(result)
str(result)
result
str(result)
summary(result)
str(result)
result$all_headers
result$
dsfs
result$status_code
result$all_headers$status_code
result$all_headers
result$url
result$request
result$request$output
result$request
result$cookies
result$cookies$domain
str(result)
httr::url_success(result)
httr::url_ok(result)
result
?choice
?switch
library(naverapi)
library(naverapi)
naverblog.search()
library(naverapi)
naverblog.search()
addinexamples:::reformatAddin()
addinexamples:::reformatAddin()
library(naverapi)
library(naverapi)
id <- 'DpMY9iw4AztbeSxYXf2t'
s <- '69Az0lv56T'
naverblog.search('안동',id,s)
naverblog.search('',id,s)
naverblog.search('d',id,s)
library(naverapi)
naverblog.search('d',id,s)
roxygen2::roxygenise()
library(naverapi)
roxygen2::roxygenise()
naverblog.search('d',id,s)
debugSource('r/blog_search.R')
naverblog.search('d',id,s)
naverblog.search('d',id,s)
library(naverapi)
naverblog.search('d',id,s)
roxygen2::roxygenize()
naverblog.search('d',id,s)
set_config()
library(naverapi)
library(naverapi)
library(naverapi)
naverblog.search('d',id,s)
naverblog.search('d',id,s)
naverblog.search('d','id','s')
id = 'DpMY9iw4AztbeSxYXf2t'
s <- '69Az0lv56T'
naverblog.search('d','id','s')
naverblog.search('d',id,s)
naverblog.search('d',id,s)
naverblog.search('d',id,s)
library(naverapi)
naverblog.search('d',id,s)
library(naverapi)
roxygen2::roxygenize()
naverblog.search('d',id,s)
naverblog.search('d',id,s)
result <- xpathSApply(doc = result, pah = '//item')
library(naverapi)
naverblog.search('d',id,s)
library(naverapi)
naverblog.search('d',id,s)
library(naverapi)
naverblog.search('d',id,s)
library(naverapi)
naverblog.search('d',id,s)
library(naverapi)
naverblog.search('d',id,s)
roxygen2::roxygenize()
library(naverapi)
naverblog.search('d',id,s)
library(naverapi)
naverblog.search('d',id,s)
library(naverapi)
naverblog.search('안동',id,s)
library(naverapi)
naverblog.search('안동',id,s)
h <- c(`X-Naver-Client-Id` = 'DpMY9iw4AztbeSxYXf2t', `X-Naver-Client-Secret` = '69Az0lv56T')  #GET header setting
q <- list(query = enc2utf8('keyword'), display = as.numeric(100),
start = as.numeric(1), sort = 'sim')
url = "https://openapi.naver.com/v1/search/blog.xml"
result <- GET(url = url, add_headers(h), query = q)
require(httr)
result <- GET(url = url, add_headers(h), query = q)
result
result <- xmlRoot(htmlTreeParse(result, useInternalNodes = T,
getDTD = F, encoding = "UTF-8"))
require(XML)
result <- xmlRoot(htmlTreeParse(result, useInternalNodes = T,
getDTD = F, encoding = "UTF-8"))
result
getNodeSet(result, '//item')
getNodeSet(result, '//item')
temp <- getNodeSet(result, '//item')
temp
temp2 <- sapply(temp, xpathSApply, path = '/title',fun = xmlValue)
temp2
temp2 <- sapply(temp, xpathSApply, path = '//title',fun = xmlValue)
temp2
class(temp2)
dim(temp2)
roxygen2::roxygenize()
library(naverapi)
roxygen2::roxygenise()
roxygen2::roxygenize()
?naverblog.search
roxygen2::roxygenise()
roxygen2::roxygenise()
library(naverapi)
?naverblog.search
?install.packages
?param
?naverblog.search
