{
    "collab_server" : "",
    "contents" : "#' @title naverblog.search\n#' @description Searching Naver blog with using Naver Open API\n#' @author Kim BM(ksd2080@hotmail.com)\n#' @docType package\n#' @name naverblog.search\n#' @export\n#' @import httr\n#' @importFrom XML xmlRoot xpathSApply htmlTreeParse xmlValue\n#' @details This is a package which use Naver Open API to search naver blog You must need Naver client ID and secret\n#' @param keyword keyword you want to search\n#' @param client_Id Naver Open API Client ID\n#' @param client_secret Naver Open API Client secret\n#' @param display the number of search result\n#' @param start start number of search result\n#' @param sort sim : similarity, date : ordered by date\n#' @examples naverblog.search(keyword = 'andong', client_Id = 'DpMY9iw4AztbeSxYXf2t', client_secret = '69Az0lv56T')\n\n\nnaverblog.search <- function(keyword = \"\", client_Id = \"\", client_secret = \"\",\n  display = 100, start = 1, sort = \"sim\")\n  {\n\n  # checking function arguments\n  args <- names(as.list(match.call(expand.dots = T)[-1]))\n\n  if (\"keyword\" %in% args)\n  {\n    if (!is.character(keyword) | length(keyword) != 1)\n      stop(\"'keywords' is needed \\n keyword must have one length\",\n        call. = F)\n  }\n\n  if (\"cilent_Id\" %in% args)\n  {\n    if (!is.character(client_Id) | length(client_Id) != 1)\n      stop(\"Client_Id is needed\\n you can get Client ID in https://developers.naver.com/main if you register\",\n        call. = F)\n  }\n\n  if (\"cilent_secret\" %in% args)\n  {\n    if (!is.character(client_secret) | length(client_secret !=\n      1))\n      stop(\"Client_secret is needed\\n you can get Client ID in https://developers.naver.com/main if you register\",\n        call. = F)\n  }\n\n  if (\"display\" %in% args)\n  {\n    if (!is.numeric(display) | display > 100)\n      stop(\"Cannot display more than 100 results\", call. = F)\n  }\n\n  if (\"sort\" %in% args)\n  {\n    if (!(sort %in% c(\"sim\", \"date\")))\n      stop(\"sim = similarity \\n date = ordered by date\",\n        call. = F)\n  }\n\n  # start#\n  url = \"https://openapi.naver.com/v1/search/blog.xml\"  #naver search api url\n\n  set_config(config(ssl_verifypeer = 0L))  #SSL non-verification setting\n\n  h <- c(`X-Naver-Client-Id` = client_Id, `X-Naver-Client-Secret` = client_secret)  #GET header setting\n  q <- list(query = enc2utf8(keyword), display = as.numeric(display),\n    start = as.numeric(start), sort = sort)  #GET parameter setting\n  result <- GET(url = url, add_headers(h), query = q)\n\n  # Checking http status code #\n  if (result$status_code != 200)\n  {\n    if (result$status_code == 400)\n    {\n      stop(\"Check request variables \\n at least, one variable is omitted.\",\n        call. = F)\n    } else if (result$status_code == 401)\n    {\n      stop(\"Check Client ID or Client Secret.\", call. = F)\n    } else if (result$status_code == 500)\n    {\n      stop(\"System Error.\", call. = F)\n    }\n  } else\n  {\n    result <- xmlRoot(htmlTreeParse(result, useInternalNodes = T,\n      getDTD = F, encoding = \"UTF-8\"))\n    result1 <- xpathSApply(doc = result, path = '//item', xmlValue)\n    # parsing return contents\n    #result1 <- sapply(result, xmlValue)\n    #bl <- sapply(doc = result, path = \"/bloggerlink\",\n    #  xmlValue)\n    #title <- sapply(doc = result, path = \"/title\",\n    #  xmlValue)\n    #desc <- sapply(doc = result, path = \"/description\",\n    #  xmlValue)\n    #link <- sapply(doc = result, path = \"/link\", xmlValue)\n\n    #result1 <- data.frame(Blogger_name = bn, Blogger_link = bl,\n    #  Blogger_title = title, Blogger_contents = desc, Blogger_link = link)\n\n    result1\n  }\n}\n\n",
    "created" : 1471715834739.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4011690070",
    "id" : "A26A9C77",
    "lastKnownWriteTime" : 1471963055,
    "last_content_update" : 1471963055216,
    "path" : "E:/Github/naverapi/R/blog_search.R",
    "project_path" : "R/blog_search.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}